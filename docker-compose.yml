version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    restart: unless-stopped

  # Backend Cluster (3 instances)
  backend-1:
    build: ./backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=postgres-primary
      - REDIS_URL=redis://redis:6379
      - INSTANCE_ID=backend-1
    depends_on:
      - postgres-primary
      - redis
    restart: unless-stopped

  backend-2:
    build: ./backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=postgres-primary
      - REDIS_URL=redis://redis:6379
      - INSTANCE_ID=backend-2
    depends_on:
      - postgres-primary
      - redis
    restart: unless-stopped

  backend-3:
    build: ./backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=postgres-primary
      - REDIS_URL=redis://redis:6379
      - INSTANCE_ID=backend-3
    depends_on:
      - postgres-primary
      - redis
    restart: unless-stopped

  # Database Cluster
  postgres-primary:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: sims_db
      POSTGRES_USER: sims_user
      POSTGRES_PASSWORD: sims_password
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator_password
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./postgres-primary.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped

  postgres-replica:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: sims_db
      POSTGRES_USER: sims_user
      POSTGRES_PASSWORD: sims_password
      PGUSER: postgres
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    depends_on:
      - postgres-primary
    restart: unless-stopped

  # Redis Cluster for Caching & Sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --cluster-enabled yes
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Frontend with CDN
  frontend:
    build: ./frontend
    environment:
      - NODE_ENV=production
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

volumes:
  postgres_primary_data:
  postgres_replica_data:
  redis_data:
  grafana_data: