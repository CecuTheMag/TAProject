version: '3.8'

services:
  # Database Cluster
  postgres-primary:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: SIMS
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "1337"
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
    ports:
      - "0.0.0.0:5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d SIMS"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for Caching & Sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "0.0.0.0:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend Cluster (3 instances)
  backend-1:
    build: ./backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=postgres-primary
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=1337
      - DB_NAME=SIMS
      - JWT_SECRET=your_super_secret_jwt_key_here_change_in_production
      - JWT_EXPIRES_IN=7d
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USER=kironotificatora@gmail.com
      - EMAIL_PASS=eieo fqhh rfcc tgsa
      - REDIS_URL=redis://redis:6379
      - INSTANCE_ID=backend-1
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend-2:
    build: ./backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=postgres-primary
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=1337
      - DB_NAME=SIMS
      - JWT_SECRET=your_super_secret_jwt_key_here_change_in_production
      - JWT_EXPIRES_IN=7d
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USER=kironotificatora@gmail.com
      - EMAIL_PASS=eieo fqhh rfcc tgsa
      - REDIS_URL=redis://redis:6379
      - INSTANCE_ID=backend-2
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend-3:
    build: ./backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=postgres-primary
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=1337
      - DB_NAME=SIMS
      - JWT_SECRET=your_super_secret_jwt_key_here_change_in_production
      - JWT_EXPIRES_IN=7d
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USER=kironotificatora@gmail.com
      - EMAIL_PASS=eieo fqhh rfcc tgsa
      - REDIS_URL=redis://redis:6379
      - INSTANCE_ID=backend-3
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend with Production Build
  frontend:
    build: ./frontend
    environment:
      - NODE_ENV=production
      - VITE_API_URL=/api
    volumes:
      - ./frontend/nginx-production.conf:/etc/nginx/conf.d/default.conf
    restart: unless-stopped

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs/selfsigned.crt:/etc/ssl/certs/selfsigned.crt
      - ./certs/selfsigned.key:/etc/ssl/private/selfsigned.key
    command: ["nginx", "-g", "daemon off;"]
    depends_on:
      - backend-1
      - backend-2
      - backend-3
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "0.0.0.0:9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "0.0.0.0:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

volumes:
  postgres_primary_data:
  redis_data:
  grafana_data:
  prometheus_data: